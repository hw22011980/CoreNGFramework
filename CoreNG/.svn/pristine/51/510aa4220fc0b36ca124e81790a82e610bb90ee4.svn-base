import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { AuthService } from 'src/app/auth/auth.service';
import { CoreService } from 'src/app/core/core.service';
import { StandardResponse } from 'src/app/standard-response/shared/standard-response.model';
import { tap } from 'rxjs/operators';
import { Injectable } from '@angular/core';
import { DevicesSiteRequest, Site, SiteRequest } from './shared/site.model';

@Injectable({
    providedIn: 'root'
})
export class SiteService {

    constructor(private coreService: CoreService,
        private authService: AuthService,
        private httpClient: HttpClient) { }

    async getSiteById(siteId, refresh = false, params = new HttpParams()) {
        const updateSiteURL = this.coreService.getServerAddress() + 'sites/' + siteId;
        let headers = new HttpHeaders();
        if (refresh) {
            headers = headers.append('Refresh', 'true');
        }
        const options = { params: params, headers: headers };

        const response = await this.httpClient.get<Site[]>(updateSiteURL, options).toPromise();
        return response;
    }

    async getSites(refresh = false, params = new HttpParams()) {
        this.authService.checkToken();

        let headers = new HttpHeaders();
        if (refresh) {
            headers = headers.append('Refresh', 'true');
        }
        const options = { params: params, headers: headers };

        const response = await this.httpClient.get<Site[]>(this.getSitesRequestUrl(), options).toPromise();
        return response;
    }

    public createOrUpdateSite(sitePayload: SiteRequest) {
        return this.httpClient.post<StandardResponse>(this.getSitesRequestUrl(), sitePayload)
            .pipe(
                tap(data => {
                    console.log(data);
                })
            );
    }

    public updateDevicesBySite(siteId:number, devicesSitePayload: DevicesSiteRequest) {
        let payload=[];
        payload.push(devicesSitePayload);
        const updateSiteURL = this.coreService.getServerAddress() + 'sites/' + siteId;
        return this.httpClient.post<StandardResponse>(updateSiteURL, payload)
            .pipe(
                tap(data => {
                    console.log(data);
                })
            );
    }

    getSitesRequestUrl() {
        return this.coreService.getServerAddress() + 'sites';
    }
}