import { Component, OnInit, Input, Output, EventEmitter, OnChanges } from '@angular/core';
import { InformationFields, UpdateInformationFieldResult, InformationField } from './info-display.model';
import { AuthService } from '../auth/auth.service';
import { FormBuilder, FormGroup, FormControl, FormArray, Validators, ValidatorFn } from '@angular/forms';
import { DeviceService } from '../devices/device.service';
import { KeyValue } from '@angular/common';

@Component({
  selector: 'app-info-display',
  templateUrl: './info-display.component.html',
  styleUrls: ['./info-display.component.css']
})
export class InfoDisplayComponent implements OnChanges {
  @Input() informationFields: InformationFields;
  @Output() myEvent = new EventEmitter<any>();
  informationTextDictionary: any = {};
  informationDropDownDictionary: any = {};
  informationFileDictionary: any = {};
  informationDateTimeDictionary: any = {};
  edit: false;
  updateForm: FormGroup;
  UpdateResult: UpdateInformationFieldResult;
  UpdateResults: UpdateInformationFieldResult[] = [];
  fileSelected: File;
  constructor(private authService: AuthService, private deviceService: DeviceService,
    private formBuilder: FormBuilder) { }

  ngOnChanges() {
    this.resetFileControls();
  }

  resetFiles() {
    this.resetFileControls();
    this.fileSelected = null;
  }

  resetFileControls() {
    this.informationTextDictionary = this.getTextElements();
    this.informationDropDownDictionary = this.getDropDownElements();
    this.informationFileDictionary = this.getFileElements();
    this.informationDateTimeDictionary = this.getDateTimeElements();

    this.updateForm = new FormGroup({
      'textUpdate': new FormArray([]),
      'dropDownUpdate': new FormArray([]),
      'fileUpdate': new FormArray([]),
      'dateTimeUpdate' : new FormArray([])
    });

    this.setTextFormControls();
    this.setDropDownFormControls();
    this.setFileFormControls();
    this.setDateTimeFormControls();
  }

  isAuthenticated() {
    return this.authService.isAuthenticated();
  }

  setTextFormControls() {
    for (let i = 0; i < this.informationFields.InformationFields.length; i++) {
      if (this.informationFields.InformationFields[i].FieldType === 'Text') {
        if (this.informationFields.InformationFields[i].Required) {
          (<FormArray>this.updateForm.get('textUpdate'))
            .push(new FormControl({ value: this.informationFields.InformationFields[i].Value.toString(), disabled: true },
              [Validators.required, Validators.maxLength(this.informationFields.InformationFields[i].MaxLength),
              Validators.pattern(this.getTextPatterValidator(this.informationFields.InformationFields[i].AlphaNumeric,
                this.informationFields.InformationFields[i].TextPattern))]));
        } else {
          (<FormArray>this.updateForm.get('textUpdate'))
            .push(new FormControl({ value: this.informationFields.InformationFields[i].Value.toString(), disabled: true },
              [Validators.maxLength(this.informationFields.InformationFields[i].MaxLength),
               Validators.pattern(this.getTextPatterValidator(this.informationFields.InformationFields[i].AlphaNumeric,
                this.informationFields.InformationFields[i].TextPattern))]));
        }
      }

      if (this.informationFields.InformationFields[i].FieldType === 'Number') {
        if (this.informationFields.InformationFields[i].Required) {
          (<FormArray>this.updateForm.get('textUpdate'))
            .push(new FormControl({ value: this.informationFields.InformationFields[i].Value.toString(), disabled: true },
              [Validators.required, Validators.maxLength(this.informationFields.InformationFields[i].MaxLength),
              this.WhitespaceValidator, Validators.pattern('^[0-9]*$'),
              Validators.min(this.informationFields.InformationFields[i].MinLength)]));
        }
      }

      if (this.informationFields.InformationFields[i].FieldType === 'IPAddress') {
        if (this.informationFields.InformationFields[i].Required) {
          (<FormArray>this.updateForm.get('textUpdate'))
            .push(new FormControl({ value: this.informationFields.InformationFields[i].Value.toString(), disabled: true },
              [Validators.required, Validators.maxLength(this.informationFields.InformationFields[i].MaxLength),
              this.WhitespaceValidator, Validators.pattern(this.IpAddressValidator())]));
        }
      }
    }
  }

  getTextPatterValidator(alphaNumeric: boolean, textPattern: string = '') {
    if (textPattern !== '' && textPattern !== undefined) {
      return textPattern;
    }

    if (!alphaNumeric) {
      return ('^[a-zA-Z0-9-_]*$');
    } else {
      return ('^[a-zA-Z0-9]*$');
    }
  }

  async setDropDownFormControls() {
    for (let i = 0; i < this.informationFields.InformationFields.length; i++) {
      if (this.informationFields.InformationFields[i].FieldType === 'DropDown') {
        (<FormArray>this.updateForm.get('dropDownUpdate'))
          .push(new FormControl({ value: this.informationFields.InformationFields[i].Value.toString(), disabled: true }));
      }
    }
  }

  onDDSelect(param, value) {
      // cascade ddl on device model
      if (param.key === '1') {
      this.deviceService.getDeviceModels(value).then(
        dm => {
          const deviceModelDictionary: any = {};
          for (let i = 0; i < dm.length; i++) {
            deviceModelDictionary[dm[i].deviceModelName] = dm[i].deviceModelID.toString();
          }
          this.informationFields.InformationFields[5].OptionValues = deviceModelDictionary;
        }
      );
    }
  }

  setFileFormControls() {
    for (let i = 0; i < this.informationFields.InformationFields.length; i++) {
      if (this.informationFields.InformationFields[i].FieldType === 'File') {
        (<FormArray>this.updateForm.get('fileUpdate'))
          .push(new FormControl('', this.fileExtensionValidator(this.informationFields.InformationFields[i].FileExtension)));
      }
    }
  }

  setDateTimeFormControls() {
    for (let i = 0; i < this.informationFields.InformationFields.length; i++) {
      if (this.informationFields.InformationFields[i].FieldType === 'DateTime') {
        (<FormArray>this.updateForm.get('dateTimeUpdate'))
          .push(new FormControl({ value: this.informationFields.InformationFields[i].Value.toString(), disabled: true } ));
      }
    }
  }


  getTextElements() {
    let index = 0;
    this.informationTextDictionary = {};
    for (let i = 0; i < this.informationFields.InformationFields.length; i++) {
      if (this.informationFields.InformationFields[i].FieldType === 'Text'
          || this.informationFields.InformationFields[i].FieldType === 'Number'
          || this.informationFields.InformationFields[i].FieldType === 'IPAddress') {
        this.informationTextDictionary[index] = this.informationFields.InformationFields[i];
        index++;
      }
    }
    return this.informationTextDictionary;
  }


  getDropDownElements() {
    let index = 0;
    this.informationDropDownDictionary = {};
    for (let i = 0; i < this.informationFields.InformationFields.length; i++) {
      if (this.informationFields.InformationFields[i].FieldType === 'DropDown') {
        this.informationDropDownDictionary[index] = this.informationFields.InformationFields[i];
        index++;
      }
    }
    return this.informationDropDownDictionary;
  }

  getFileElements() {
    this.informationFileDictionary = {};
    let index = 0;
    for (let i = 0; i < this.informationFields.InformationFields.length; i++) {
      if (this.informationFields.InformationFields[i].FieldType === 'File') {
        this.informationFileDictionary[index] = this.informationFields.InformationFields[i];
        index++;
      }
    }
    return this.informationFileDictionary;
  }

  getDateTimeElements() {
    this.informationDateTimeDictionary = {};
    let index = 0;
    for (let i = 0; i < this.informationFields.InformationFields.length; i++) {
      if (this.informationFields.InformationFields[i].FieldType === 'DateTime') {
        this.informationDateTimeDictionary[index] = this.informationFields.InformationFields[i];
        index++;
      }
    }
    return this.informationDateTimeDictionary;
  }

  getEditInputVisibility(Editable: boolean) {
    if (Editable) {
      if (this.edit) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }

  getValueVisibility(Editable: boolean) {
    if (Editable) {
      if (this.edit) {
        return false;
      } else {
        return true;
      }
    } else {
      return true;
    }
  }

  onUpdateElements() {
    this.edit = false;
    this.UpdateResults = [];
    for (const c in this.updateForm.controls) {
      if (this.updateForm.controls.hasOwnProperty(c)) {
        this.UpdateResult = {};
        if (this.updateForm.get(c) instanceof FormArray) {
          for (let i = 0; i < (<FormArray>this.updateForm.get(c)).controls.length; i++) {
            this.UpdateResult = {};
            if (c === 'textUpdate') {
              this.UpdateResult.Name = this.informationTextDictionary[i].Name;
              this.UpdateResult.Value = (<FormArray>this.updateForm.get(c)).controls[i].value.trim();
            } else if (c === 'dropDownUpdate') {
              this.UpdateResult.Name = this.informationDropDownDictionary[i].Name;
              this.UpdateResult.Value = (<FormArray>this.updateForm.get(c)).controls[i].value;
            } else if (c === 'fileUpdate') {
              this.UpdateResult.Name = this.informationFileDictionary[i].Name;
              this.UpdateResult.Value = this.fileSelected;
              this.fileSelected = null;
            }

            this.UpdateResults.push(this.UpdateResult);
          }
        }
      }
    }

    this.myEvent.emit(
      this.UpdateResults
    );

    this.editableElementsToReadOnly();
  }

  onSelectFile($event) {
    this.fileSelected = null;
    this.fileSelected = $event.target.files[0];
  }

  enableEditableElements() {
    for (const c in this.updateForm.controls) {
      if (this.updateForm.controls.hasOwnProperty(c)) {
        if (this.updateForm.get(c) instanceof FormArray) {
          for (let i = 0; i < (<FormArray>this.updateForm.get(c)).controls.length; i++) {
            if (c === 'textUpdate') {
              if (this.informationTextDictionary[i].Editable) {
                const ctrl = (<FormArray>this.updateForm.get(c)).controls[i];
                ctrl.enable();
              } else {
                const ctrl = (<FormArray>this.updateForm.get(c)).controls[i];
                ctrl.disable();
              }
            }
            if (c === 'dropDownUpdate') {
              if (this.informationDropDownDictionary[i].Editable) {
                const ctrl = (<FormArray>this.updateForm.get(c)).controls[i];
                ctrl.enable();
              } else {
                const ctrl = (<FormArray>this.updateForm.get(c)).controls[i];
                ctrl.disable();
              }
            }

            if (c === 'dateTimeUpdate') {
              if (this.informationDateTimeDictionary[i].Editable) {
                const ctrl = (<FormArray>this.updateForm.get(c)).controls[i];
                ctrl.enable();
              } else {
                const ctrl = (<FormArray>this.updateForm.get(c)).controls[i];
                ctrl.disable();
              }
            }
          }
        }
      }
    }
  }

  editableElementsToReadOnly() {
    for (const c in this.updateForm.controls) {
      if (this.updateForm.controls.hasOwnProperty(c)) {
        if (this.updateForm.get(c) instanceof FormArray) {
          for (let i = 0; i < (<FormArray>this.updateForm.get(c)).controls.length; i++) {
            if (c === 'textUpdate') {
              if (this.informationTextDictionary[i].Editable) {
                const ctrl = (<FormArray>this.updateForm.get(c)).controls[i];
                if (ctrl.enable) {
                  ctrl.disable();
                }
              }
            }
            if (c === 'dropDownUpdate') {
              if (this.informationDropDownDictionary[i].Editable) {
                const ctrl = (<FormArray>this.updateForm.get(c)).controls[i];
                if (ctrl.enable) {
                  ctrl.disable();
                }
              }
            }
            if (c === 'dateTimeUpdate') {
              if (this.informationDateTimeDictionary[i].Editable) {
                const ctrl = (<FormArray>this.updateForm.get(c)).controls[i];
                if (ctrl.enable) {
                  ctrl.disable();
                }
              }
            }
          }
        }
      }
    }
  }

  fileExtensionValidator(fileExtention: string): ValidatorFn {
    return (control: FormControl): { [key: string]: any } | null => {
      const ext = control.value.substring(control.value.lastIndexOf('.'));
      if (ext.toLowerCase() !== fileExtention && control.value !== '') {
        return { valid: false };
      } else {
        return null;
      }
    };
  }

  public WhitespaceValidator(control: FormControl) {
    const isWhitespace = (control.value || '').trim().length === 0;
    const isValid = !isWhitespace;
    return isValid ? null : { 'whitespace': true };
  }

  public KeepOrder () {
    return 0;
  }

  public IpAddressValidator(): RegExp {
      const ipformat = '^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)' +
      '\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$';
      return RegExp(ipformat);
  }

  public omit_invalid_characters(event, deviceInfo: any, index: number) {
    const key = event.charCode;
    if (deviceInfo[index].TextPattern !== '' && deviceInfo[index].TextPattern !== undefined) {
      if (event.key.match(RegExp(deviceInfo[index].TextPattern))) {
        return key;
      }
    }

    if (deviceInfo[index].FieldType === 'Text' && !deviceInfo[index].AlphaNumeric) {
      return ((key >= 48 && key <= 57) || (key >= 65 && key <= 90) || (key >= 97 && key <= 122) || key === 45 || key === 95);
    } else if (deviceInfo[index].FieldType === 'Text' && deviceInfo[index].AlphaNumeric) {
      return ((key >= 48 && key <= 57) || (key >= 65 && key <= 90) || (key >= 97 && key <= 122));
    } else if (deviceInfo[index].FieldType === 'Number') {
      return ((key > 47 && key < 58));
    }
  }

  public getErrorMessage(value, deviceInfo: any, index: number): String {
    // invalid input is detected, return appropriate message
    if (value === '') {
      return deviceInfo[index].Description + ' cannot be blank';
    } else if (value > deviceInfo[index].MaxLength && deviceInfo[index].FieldType === 'Number') {
      return 'Value must not exceed ' + deviceInfo[index].MaxLength;
    } else if (value < deviceInfo[index].MinLength && deviceInfo[index].FieldType === 'Number') {
      return 'Value must not be less than ' + deviceInfo[index].MinLength;
    } else if (deviceInfo[index].FieldType === 'IPAddress') {
      return deviceInfo[index].Description + ' is in invalid format ';
    } else if (deviceInfo[index].FieldType === 'Text' && !deviceInfo[index].AlphaNumeric) {
      if (deviceInfo[index].TextPattern === undefined || deviceInfo[index].TextPattern === '') {
        return 'Value contains invalid characters. Valid characters are: A-Z a-z 0-9 - _';
      }

      return 'Value contains invalid characters. Valid characters are: ' + deviceInfo[index].TextPatternDescription;
    } else if (deviceInfo[index].FieldType === 'Text' && deviceInfo[index].AlphaNumeric) {
      return 'Value contains invalid characters. Valid characters are: A-Z a-z 0-9';
    }
    return deviceInfo[index].Description + ' is invalid';
  }
}
