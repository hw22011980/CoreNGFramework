import { Injectable } from '@angular/core';
import { tap } from 'rxjs/operators';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Devices } from './shared/devices.model';
import { DeviceConnectStatus } from './shared/device-connect-status';
import { CoreService } from '../core/core.service';
import { AuthService } from '../auth/auth.service';
import { Observable } from 'rxjs';
import { ActionResponse } from '../action-response/shared/action-response.model';
import { StandardResponse } from '../standard-response/shared/standard-response.model';

@Injectable({
  providedIn: 'root'
})
export class SetupService {
  private formData: FormData;
  public devices: Devices;
  public actionResponse: ActionResponse;
  meterTypeDictionary: any = {};
  deviceStatusDictionary: any = {};
  communicationProfileDictionary: any = {};
  supportingLayerDictionary: any = {};
  iecOpeningDictionary: any = {};
  parityDictionary: any = {};
  stopBits: any = {};
  dataBits: any = {};


  constructor(private coreService: CoreService,
    public authService: AuthService,
    private httpClient: HttpClient) { }

  public async GetMenus(deviceId) {
    let headers = new HttpHeaders();
    headers = headers.append('Refresh', 'true');
    const options = { headers: headers };

    const getobjectURL = this.coreService.getServerAddress() + 'setuptree?deviceId=' + deviceId;
    return await this.httpClient.get(getobjectURL, { headers }).toPromise();
  }

  public setValue(param: any): Observable<any> {
    let headers = new HttpHeaders();
    headers = headers.append('Refresh', 'true');
    const options = { headers: headers };

    const strdevice = localStorage.getItem('device');
    const device = JSON.parse(strdevice);
    const pn = device.plantNumber;

    let isConnected = 0;
    if (localStorage.hasOwnProperty('previousId')) {
      const connectstatus: DeviceConnectStatus = JSON.parse(localStorage.getItem('previousId'));
      isConnected = connectstatus.isConnected ? 1 : 0;
    }

    const body = {
      plantnumber: pn,
      id: param.data.id,
      isConnected: isConnected,
      data: param.data.objectsRead.value
    };
    console.log(body);

    // call mddcs webapi services. Set values to device
    return this.SetObject(body, headers);
  }
  public getValue(parId: string): Observable<any> {
    let headers = new HttpHeaders();
    headers = headers.append('Refresh', 'true');
    const options = { headers: headers };

    const strdevice = localStorage.getItem('device');
    const device = JSON.parse(strdevice);
    const pn = device.plantNumber;
    // call mddcs webapi services. get metadata from DB, get values from device
    if (localStorage.hasOwnProperty('previousId')) {
      const connectstatus: DeviceConnectStatus = JSON.parse(localStorage.getItem('previousId'));
      console.log('connected:' + connectstatus.isConnected);
      return this.GetObject(pn, parId, headers, connectstatus.isConnected ? 1 : 0);
    } else {
      return this.GetObject(pn, parId, headers, 0);
    }
  }
  public GetObject(plantNumber: string, parId: string, headers: HttpHeaders, isconnected: number) {
    const param2 = '?plantNumber=' + plantNumber + '&paramid=' + parId + '&isconnected=' + isconnected;
    const getobjectURL = this.processURL(parId, param2);

    console.log(getobjectURL);
    return this.httpClient.get(getobjectURL, { headers })
      .pipe(
        tap(data => {
        })
      );
  }
  public SetObject(body: any, headers: HttpHeaders) {
    console.log(body);
    const setobjectURL = this.coreService.getServerAddress() + 'setup';
    return this.httpClient.post(setobjectURL, body, { headers })
      .pipe(
        tap(data => {
        })
      );
  }
  public GetCompareSetup(ids: any): Observable<any> {
    let headers = new HttpHeaders();
    headers = headers.append('Refresh', 'true');
    let options = { headers: headers };

    let strdevice = localStorage.getItem('device');
    let device = JSON.parse(strdevice);
    let body = {
      plantnumber: device.plantNumber,
      isConnected: 1, // For CompareSetup It always be 1.
      data: ids
    };

    let processURL = this.coreService.getServerAddress() + `setup/${device.deviceId}/compare`;
    return this.httpClient.post<StandardResponse>(processURL, body, options)
      .pipe(
        tap(data => {
          console.log(data);
        })
      );
  }

  public getValues(ids: any, isConnected: number): Observable<any> {
    let strdevice = localStorage.getItem('device');
    let device = JSON.parse(strdevice);

    let body = {
      plantnumber: device.plantNumber,
      isConnected: isConnected, 
      data: ids
    };
    let processURL = this.coreService.getServerAddress() + `setup/${device.deviceId}/read`;
    // Don't remove commet code snippet. Later we need to research again.
    // return this.httpClient.post(processURL, body, {
    //   reportProgress: true, 
    //   observe: "events",
    //   headers: new HttpHeaders({ 'ngsw-bypass': 'true' }) 
    // })
    //   .pipe(
    //     tap(data => {
    //       console.log(data);
    //     })
    //   ); 
    return this.httpClient.post<StandardResponse>(processURL, body)
      .pipe(
        tap(data => {
          console.log(data);
        })
      );
  }

  public setValues(data: any, isConnected: number): Observable<any> {
    let strdevice = localStorage.getItem('device');
    let device = JSON.parse(strdevice);

    let body = {
      plantnumber: device.plantNumber,
      isConnected: isConnected, 
      data: data
    };
    console.log(body);
    let processURL = this.coreService.getServerAddress() + `setup/${device.deviceId}/write`;
    
    return this.httpClient.post<StandardResponse>(processURL, body)
      .pipe(
        tap(data => {
          console.log(data);
        })
      );
  }

  public WriteCompareSetup(data: any): Observable<any> {
    let strdevice = localStorage.getItem('device');
    let device = JSON.parse(strdevice);
    let body = {
      plantnumber: device.plantNumber,
      data: data
    };
    console.log(body);
    let processURL = this.coreService.getServerAddress() + `setup/${device.deviceId}/writecompare`;
	  return this.httpClient.post<StandardResponse>(processURL, body)
      .pipe(
        tap(data => {
          console.log(data);
        })
    );
  }

  private processURL(id: string, param: string): string {
    switch (id) {
      default: {
        return this.coreService.getServerAddress() + 'setup' + param;
      }
    }
  }
}

