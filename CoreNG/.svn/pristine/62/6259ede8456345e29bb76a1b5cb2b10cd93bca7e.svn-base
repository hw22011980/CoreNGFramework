import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest, HttpErrorResponse, HttpResponse } from '@angular/common/http';

import { Injectable, Injector } from '@angular/core';
import { AuthService } from '../../auth/auth.service';
import { Observable, BehaviorSubject, throwError } from 'rxjs';
import { catchError, switchMap, finalize, filter, take, defaultIfEmpty } from 'rxjs/operators';
import { AccessToken } from 'src/app/auth/accesstoken.model';
import { ErrorResponse } from 'src/app/action-response/shared/error-response.model';

@Injectable()
export class AuthInterceptor implements HttpInterceptor {

  isRefreshingToken = false;
  tokenSubject: BehaviorSubject<AccessToken> = new BehaviorSubject<AccessToken>(null);
  defaultMessage =
  'Please make sure the services, database, and configuration files are properly set up and then try refreshing the login page.';
  private auth: AuthService;

  constructor(private injector: Injector) {}

  addToken(req: HttpRequest<any>) {
    return req = req.clone({
      setHeaders: {
        Authorization: `Bearer ${this.auth.getToken().access_token}`,
        'Cache-Control': 'no-cache',
        'Pragma': 'no-cache',
        'Expires': '0'
      }
    });
  }

  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    this.auth = this.injector.get(AuthService);
    if (!this.auth) { return next.handle(req); }
    req = this.addToken(req);
    return next.handle(req)
      .pipe(
        catchError(err => {
          if (err instanceof HttpErrorResponse) {
            switch ((<HttpErrorResponse>err).status) {
              case 401: return this.handle401Error(err, req, next);
              case 403: return this.handle403Error(err);
              case 400: return throwError(err);
              case 409: return throwError (err);
              case 0:
                {
                  if (this.auth.isAuthenticated()) { // let's check if there was an existing user/login
                    return this.logoutUser(err);
                  }
                  return this.logoutUser(err);
                }
              default:
                return throwError(err);
            }
          } else {
            return this.logoutUser();
          }
        }));
  }

  handle403Error(error?: HttpErrorResponse) {
    // if 403 found, header will be hide.
    localStorage.setItem('showHeader', 'false');
    this.auth.license();
    return throwError(error);
  }

  handle401Error(error: HttpErrorResponse, req: HttpRequest<any>, next: HttpHandler) {
    if (!this.isRefreshingToken) {
      console.log('Token Expired. Trying to Refresh Token');
      this.isRefreshingToken = true;
      // Reset here so that the following requests wait until the token
      // comes back from the refreshToken call.
      this.tokenSubject.next(null);

      return this.auth.refreshToken()
        .pipe(
          switchMap((accessToken) => {
            if (accessToken != null) {
              this.tokenSubject.next(accessToken);
              return next.handle(this.addToken(req));
            } else {
              return this.logoutUser(error, true);
            }
          }),
          catchError((err) => {
            console.log('Error: Refresh Token Request');
            return this.logoutUser(error, true);
          }),
          finalize(() => this.isRefreshingToken = false)
        );
    } else {
      return this.tokenSubject
        .pipe(
          filter(token => token != null),
          take(1),
          switchMap(token => {
            return next.handle(req);
          })
        );
    }


  }


  logoutUser(error?: HttpErrorResponse, isTimeout: boolean= false) {
    /// reset last error
    localStorage.setItem('error', (!error) ? '' : error.message);
      if (!error.url.includes('/api/token')) {
        console.log('Redirecting to Login Page');
        this.auth.logout();
      }
      if (!isTimeout) {
        if (!error) {
          const newError = new ErrorResponse ();
          newError.status = 500;
          newError.message = this.defaultMessage;
          return throwError(newError);
        } else {
          const newError = new ErrorResponse ();
          newError.status = 500;
          newError.message = this.defaultMessage;
          localStorage.setItem('error', this.defaultMessage);
          if (error.status !== 403) {
            return throwError(newError); // logout user with default error info
          } else {
            if (error.url.includes('/api/token')) {
              return throwError(newError); // logout user with default error info
            } else {
              localStorage.setItem('error', error.message);
              return throwError(error);
            }
          }
        }
      } else {
        const message = 'Login Session Timeout. To reconnect, sign in again';
        const newError = new ErrorResponse ();
        newError.message = message;
        return throwError(newError); // logout user with timeout error info
      }
  }

}
