import { Component, OnInit } from '@angular/core';
import { FirmwareService } from '../firmware.service';
import { ActivatedRoute } from '@angular/router';
import { Firmware } from '../shared/firmware.model';
import { HttpParams } from '@angular/common/http';
import { DeviceService } from 'src/app/devices/device.service';
import { InformationFields, InformationField, UpdateInformationFieldResult } from 'src/app/info-display/info-display.model';
import { ActionResponse } from 'src/app/action-response/shared/action-response.model';
import { ToastrService } from 'ngx-toastr';

@Component({
  selector: 'app-firmware-info',
  templateUrl: './firmware-info.component.html',
  styleUrls: ['./firmware-info.component.css']
})
export class FirmwareInfoComponent implements OnInit {
  firmwares: Firmware[];
  firmware: Firmware;
  firmwareId: string;
  meterTypeDictionary: any = {};
  edit = false;
  infoModel: InformationFields = {};
  infoFields: InformationField[] = [];
  infoField: InformationField = {};
  private formData: FormData;
  actionResponse: ActionResponse;
  toastrId: number;
  constructor(private firmwareService: FirmwareService, private activatedRoute: ActivatedRoute, private deviceService: DeviceService,
    private toastrService: ToastrService) { }

  ngOnInit() {
    this.toastrId = 4820;
    this.firmwareId = this.activatedRoute.snapshot.params['id'];
    this.onGetFirmwares();
    this.meterTypeDictionary = this.deviceService.getMeterTypeDictionary();
  }

  onGetFirmwares() {
    let params = new HttpParams();
    params = params.append('fwId', String(this.firmwareId));

    this.firmwareService.getFirmwares(true, params).subscribe((firmwares) => {
      this.firmware = firmwares.firmwares[0];
    },
      (error: any) => {
        console.log(error);
        this.showErrorUploadToastr(error);
      },
      () => {
        this.generateInfoComponent();
      });


  }

  onUpdateInformation(UpdateResults: UpdateInformationFieldResult[]) {
    this.showOngoingUploadToastr();
    console.log(UpdateResults);
    this.formData = new FormData();
    if (UpdateResults !== null) {
      for (let i = 0; i < UpdateResults.length; i++) {
        if (UpdateResults[i].Value != null) {
          this.formData.append(UpdateResults[i].Name, UpdateResults[i].Value);
        }
      }
    }

    this.firmwareService.updateFirmware(this.formData).subscribe((actionResponse) => {
      this.actionResponse = actionResponse;
    },
      (error: any) => {
        console.log(error);
        this.showErrorUploadToastr(error);
        this.generateInfoComponent();
      },
      () => {
        this.processUpdatedFirmwares();
        console.log(this.actionResponse);
      });
  }

  generateInfoComponent() {
    this.infoModel = {};
    this.infoFields = [];
    this.infoField = {};

    this.infoModel.Editable = true;
    this.infoModel.Header = 'FIRMWARE INFORMATION';

    // define the information values to be displayed
    this.infoField.Name = 'FWId';
    this.infoField.Description = 'Firmware Id';
    this.infoField.Value = this.firmware.id.toString();
    this.infoField.Editable = false;
    this.infoField.FieldType = 'Text';
    this.infoField.Required = true;
    this.infoField.MaxLength = 10;
    this.infoFields.push(this.infoField);

    this.infoField = {};
    this.infoField.Name = 'FWCode';
    this.infoField.Description = 'Code';
    this.infoField.Value = this.firmware.fwCode;
    this.infoField.Editable = true;
    this.infoField.FieldType = 'Text';
    this.infoField.Required = true;
    this.infoField.MaxLength = 20;
    this.infoField.AlphaNumeric = false;
    this.infoField.TextPattern = '^[a-zA-Z0-9-_#.]*$';
    this.infoField.TextPatternDescription = 'A-Z a-z 0-9 - _ # .';
    this.infoFields.push(this.infoField);

    this.infoField = {};
    this.infoField.Name = 'FWName';
    this.infoField.Description = 'Name';
    this.infoField.Value = this.firmware.fwName;
    this.infoField.Editable = true;
    this.infoField.FieldType = 'Text';
    this.infoField.Required = true;
    this.infoField.MaxLength = 50;
    this.infoField.AlphaNumeric = false;
    this.infoField.TextPattern = '^[a-zA-Z0-9-_#.]*$';
    this.infoField.TextPatternDescription = 'A-Z a-z 0-9 - _ # .';
    this.infoFields.push(this.infoField);

    this.infoField = {};
    this.infoField.Name = 'FWVersion';
    this.infoField.Description = 'Version';
    this.infoField.Value = this.firmware.fwVersion;
    this.infoField.Editable = true;
    this.infoField.FieldType = 'Text';
    this.infoField.Required = true;
    this.infoField.MaxLength = 16;
    this.infoField.AlphaNumeric = false;
    this.infoField.TextPattern = '^[a-zA-Z0-9-_#.]*$';
    this.infoField.TextPatternDescription = 'A-Z a-z 0-9 - _ # .';
    this.infoFields.push(this.infoField);

    this.infoField = {};
    this.infoField.Name = 'FWEdition';
    this.infoField.Description = 'Edition';
    this.infoField.Value = this.firmware.fwEdition;
    this.infoField.Editable = true;
    this.infoField.FieldType = 'Text';
    this.infoField.Required = true;
    this.infoField.MaxLength = 50;
    this.infoField.AlphaNumeric = false;
    this.infoField.TextPattern = '^[a-zA-Z0-9-_#.]*$';
    this.infoField.TextPatternDescription = 'A-Z a-z 0-9 - _ # .';
    this.infoFields.push(this.infoField);

    this.infoField = {};
    this.infoField.Name = 'FWDescription';
    this.infoField.Description = 'Description';
    this.infoField.Value = this.firmware.fwDescription;
    this.infoField.Editable = true;
    this.infoField.FieldType = 'Text';
    this.infoField.Required = false;
    this.infoField.MaxLength = 100;
    this.infoField.AlphaNumeric = false;
    this.infoField.TextPattern = '^[a-zA-Z0-9-_#. ]*$';
    this.infoField.TextPatternDescription = 'A-Z a-z 0-9 - _ # . space';
    this.infoFields.push(this.infoField);

    this.infoField = {};
    this.infoField.Name = 'DeviceTypeId';
    this.infoField.Description = 'Device Type';
    this.infoField.Value = this.firmware.deviceTypeId;
    this.infoField.DisplayValue = this.firmware.deviceTypeName;
    this.infoField.Editable = true;
    this.infoField.FieldType = 'DropDown';
    this.infoField.OptionValues = this.deviceService.getMeterTypeDictionary();
    this.infoField.Required = true;
    this.infoFields.push(this.infoField);

    this.infoField = {};
    this.infoField.Name = 'Status';
    this.infoField.Description = 'Status';
    this.infoField.Value = this.firmware.status;
    this.infoField.DisplayValue = this.firmware.statusDescription;
    this.infoField.Editable = true;
    this.infoField.FieldType = 'DropDown';
    this.infoField.OptionValues = this.firmwareService.getFirmwareStatusDictionary();
    this.infoField.Required = true;
    this.infoFields.push(this.infoField);

    this.infoField = {};
    this.infoField.Name = 'FWImage';
    this.infoField.Description = 'New Firmware Image';
    this.infoField.Value = '';
    this.infoField.DisplayValue = '';
    this.infoField.Editable = true;
    this.infoField.FieldType = 'File';
    this.infoField.FileExtension = '.bin';
    this.infoFields.push(this.infoField);

    this.infoModel.InformationFields = this.infoFields;
  }


  showOngoingUploadToastr() {
    this.toastrService.remove(this.toastrId); // clean up first before showing another
    // this.onGoingUpload = true; // temporarily disable other fw uploads when an upload is ongoing
    this.toastrService.info('Firmware Information Update', 'Firmware Information Update Ongoing', {
      easeTime: 300,
      timeOut: 10000,
      closeButton: true,
      tapToDismiss: false,
      positionClass: 'toast-bottom-left'
    }).toastId = this.toastrId;
  }

  showErrorUploadToastr(error: any) {
    this.toastrService.remove(this.toastrId); // clean up first before showing another
    this.toastrService.error(error.error.message, 'Firmware Info Update Failed', {
      easeTime: 300,
      timeOut: 10000,
      closeButton: true,
      tapToDismiss: false,
      positionClass: 'toast-bottom-left'
    });
  }

  showCompleteUploadToastr() {
    this.toastrService.success('Firmware Information Update', 'Firmware Information Updated', {
      enableHtml: true,
      easeTime: 300,
      timeOut: 10000,
      closeButton: true,
      tapToDismiss: false,
      positionClass: 'toast-bottom-left'
    });
  }

  processUpdatedFirmwares() {
    // localStorage.removeItem(this.onGoingUploadFW);
    this.toastrService.remove(this.toastrId);
    this.showCompleteUploadToastr();
    this.onGetFirmwares();
  }
}
