import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse, HttpHeaders, HttpParams } from '@angular/common/http';
import { AuthService } from '../auth/auth.service';
import { CoreService } from '../core/core.service';
import { tap } from 'rxjs/operators';
import { DlmsAssociations } from './shared/dlms-associations.model';
import { DeviceDLMSKeys } from './shared/device-keys-dlms.model';
import { ActionResponse } from '../action-response/shared/action-response.model';

@Injectable({
  providedIn: 'root'
})
export class KeysService {
  private formData: FormData;
  public dlmsKeys: DeviceDLMSKeys;
  public dlmsAssociations: DlmsAssociations;
  authenticationMethodDictionary: any = {};
  applicationContextDictionary: any = {};

  constructor(private coreService: CoreService,
    private authService: AuthService,
    private httpClient: HttpClient) { }

  getKeys() {
    return this.httpClient.get<DeviceDLMSKeys>(this.getKeysRequestUrl())
      .pipe(
        tap(data => {
          this.dlmsKeys = data;
          console.log(data);
        })
      );
  }

  getDlmsAssociations(refresh = false, params = new HttpParams()) {
    let headers = new HttpHeaders();

    if (refresh) {
      headers = headers.append('Refresh', 'true');
    }

    const options = { params: params, headers: headers };

    const getDlmsAssociationsRequestUrl = this.coreService.getServerAddress() + 'associations';
    return this.httpClient.get<DlmsAssociations>(getDlmsAssociationsRequestUrl, options)
      .pipe(
        tap(data => {
          this.dlmsAssociations = data;
          console.log(data);
        })
      );
  }

  public uploadDSF(fileToUpload: File, deviceType: string) {
    const uploadDSFRequestUrl = this.coreService.getServerAddress() + 'keys/dsf/' + deviceType;

    this.formData = new FormData();
    this.formData.append('DSFImage', fileToUpload);
    return this.httpClient.put<ActionResponse>(uploadDSFRequestUrl, this.formData)
      .pipe(
        tap(data => {
          console.log(data);
        })
      );
  }

  getApplicationContextDictionary() {
    this.applicationContextDictionary['LN'] = '1';
    this.applicationContextDictionary['SN'] = '2';
    this.applicationContextDictionary['LN_WITH_CIPHERING'] = '3';
    this.applicationContextDictionary['SN_WITH_CIPHERING'] = '4';

    return this.applicationContextDictionary;
  }

  getAuthenticationMethodDictionary() {
    this.authenticationMethodDictionary['NO_SECURITY'] = '0';
    this.authenticationMethodDictionary['LOW_SECURITY'] = '1';
    this.authenticationMethodDictionary['HLS'] = '2';
    this.authenticationMethodDictionary['HIGH_SECURITY_SHA1'] = '4';
    this.authenticationMethodDictionary['HIGH_SECURITY_GMAC'] = '5';

    return this.authenticationMethodDictionary;
  }

  public getKeysRequestUrl() {
    return this.coreService.getServerAddress() + 'keys';
  }
}
