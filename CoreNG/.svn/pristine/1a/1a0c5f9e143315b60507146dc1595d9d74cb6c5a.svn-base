import { Component, OnInit, ViewChild } from '@angular/core';
import { DLMSAssociation } from '../shared/dlms-asssociation.model';
import { KeysService } from '../keys.service';
import { PagerService } from 'src/app/core/pager/pager.service';
import { ToastrService } from 'ngx-toastr';
import { ActionResponse } from 'src/app/action-response/shared/action-response.model';
import { SearchFields, SearchField, SearchResult } from 'src/app/search/search.model';
import { DeviceService } from 'src/app/devices/device.service';
import { HttpParams } from '@angular/common/http';
import { ActionResponseService } from 'src/app/action-response/action-response.service';
import { SpinnerService } from 'src/app/spinner/spinner.service';
import { DeviceCommActions } from 'src/app/devices/shared/device-comm-actions';

@Component({
  selector: 'app-keys-dlms-association-list',
  templateUrl: './keys-dlms-association-list.component.html',
  styleUrls: ['./keys-dlms-association-list.component.css']
})
export class KeysDlmsAssociationListComponent implements OnInit {
  @ViewChild('form') form;
  fileSelected: File;
  dlmsAssociations: DLMSAssociation[];
  pager: any = {};
  pagedItems: DLMSAssociation[];
  actionResponse: ActionResponse;
  selectedMeterType = 'Mk10M';

  searchModel: SearchFields = {};
  searchFields: SearchField[] = [];
  searchField: SearchField = {};
  onGoingUpload: boolean;
  ongoingUploadDSF: string;
  toastrId: number;

  searchValues: SearchResult[] = [];
  commActions: DeviceCommActions;

  constructor(public keysService: KeysService, private pagerService: PagerService, private toastrService: ToastrService,
    private deviceService: DeviceService, private actionResponseService: ActionResponseService, public spinnerService: SpinnerService) {
      this.commActions = new DeviceCommActions(deviceService);
  }

  ngOnInit() {
    this.onGetDLMSAssociations();
    this.generateSearchComponent();
    this.ongoingUploadDSF = 'onGoingUploadDSF';
    this.toastrId = 4719;

    if (localStorage.getItem(this.ongoingUploadDSF) != null || (localStorage.getItem(this.ongoingUploadDSF) === 'true')) {
      this.showOngoingUploadToastr();
    }
  }

  onGetDLMSAssociations(refresh = false, search: SearchResult[] = null) {
    this.pager = [];
    this.dlmsAssociations = [];

    let params = new HttpParams();
    if (search !== null) {
      this.searchValues = search;
    }

    // Begin assigning parameters
    if (this.searchValues !== null) {
      for (let i = 0; i < this.searchValues.length; i++) {
        params = params.append(this.searchValues[i].Name, this.searchValues[i].Value);
      }
    }

    this.keysService.getDlmsAssociations(refresh, params).subscribe((dlmsAssociations) => {
      this.dlmsAssociations = dlmsAssociations.dlmsAssociations;
      this.setPage(1);
    },
      (err) => { this.pager = []; this.dlmsAssociations = []; console.log(err); });

    this.commActions.autoDisconnectLastConnection();
    console.log(this.dlmsAssociations);

  }

  onUploadDSF() {
    if (this.fileSelected == null) {
      const element: HTMLElement = document.getElementById('inputDSFFile') as HTMLElement;
      element.click();
    } else {
      this.showOngoingUploadToastr();
      localStorage.setItem(this.ongoingUploadDSF, 'true');
      let dateTimeNow = new Date(Date.now());

      console.log('Keys(DSF/DSFX) Import Started: ' + dateTimeNow);

      this.keysService.uploadDSF(this.fileSelected, this.selectedMeterType).subscribe((actionResponse) => {
        this.actionResponse = actionResponse;
      },
        (error: any) => {
          this.resetFiles();
          console.log(error);
          dateTimeNow = new Date(Date.now());
          console.log('Upload of Keys(DSF/DSFX) Finished: ' + dateTimeNow);
          localStorage.removeItem(this.ongoingUploadDSF);
          this.showErrorUploadToastr(error);
        },
        () => {
          this.resetFiles();
          dateTimeNow = new Date(Date.now());
          console.log('Upload of Keys(DSF/DSFX) Finished: ' + dateTimeNow);
          this.processImportedDevices();
        });
    }
  }

  onSelectFile($event) {
    this.fileSelected = $event.target.files[0];
  }

  setPage(page: number) {
    // get pager object from service
    this.pager = this.pagerService.getPager(this.dlmsAssociations.length, page);

    // get current page of items
    this.pagedItems = this.dlmsAssociations.slice(this.pager.startIndex, this.pager.endIndex + 1);
  }

  resetFiles() {
    this.form.nativeElement.reset();
    this.fileSelected = null;
    this.onGoingUpload = false;
  }

  processImportedDevices() {
    localStorage.removeItem(this.ongoingUploadDSF);
    this.toastrService.remove(this.toastrId);
    const dateTimeNow = Date.now().toString();
    this.actionResponseService.put(dateTimeNow, this.actionResponse);
    this.showCompleteUploadToastr(dateTimeNow);
  }

  generateSearchComponent() {
    // Note: When creating this object, be mindful of the order you're creating it with.
    // KeyValue pipe returns key-value pair in alphabetical order for strings, ascending for numbers

    // Search Values
    this.searchField.Name = 'DLMSAssociationDescription';
    this.searchField.Description = 'DLMS Assoc. Description';
    this.searchField.FieldType = 'Search';
    this.searchField.PlaceHolder = 'Search DLMS Association';
    this.searchFields.push(this.searchField);

    this.searchField = {};
    this.searchField.Name = 'DLMSAssociationId';
    this.searchField.Description = 'DLMS Assoc. Id';
    this.searchField.FieldType = 'Search';
    this.searchField.PlaceHolder = 'Search DLMS Association';
    this.searchFields.push(this.searchField);

    // Filters
    this.searchField = {};
    this.searchField.Name = 'ApplicationContext';
    this.searchField.Description = 'Application Context';
    this.searchField.FieldType = 'Filter';
    this.searchField.PlaceHolder = 'All Application Context';
    this.searchField.OptionValues = this.keysService.getApplicationContextDictionary();
    this.searchFields.push(this.searchField);

    this.searchField = {};
    this.searchField.Name = 'AuthenticationMethod';
    this.searchField.Description = 'Authentication Method';
    this.searchField.FieldType = 'Filter';
    this.searchField.PlaceHolder = 'All Authentication Method';
    this.searchField.OptionValues = this.keysService.getAuthenticationMethodDictionary();
    this.searchFields.push(this.searchField);

    this.searchField = {};
    this.searchField.Name = 'DeviceTypeId';
    this.searchField.Description = 'Device Type';
    this.searchField.FieldType = 'Filter';
    this.searchField.PlaceHolder = 'All Device Type';
    this.searchField.OptionValues = this.deviceService.getMeterTypeDictionary();
    this.searchFields.push(this.searchField);

    this.searchModel.SearchFields = this.searchFields;
  }

  showOngoingUploadToastr() {
    this.toastrService.remove(this.toastrId); // clean up first before showing another
    this.onGoingUpload = true; // temporarily disable other tsv uploads when an upload is ongoing
    this.toastrService.info('Refresh to Update DLMS Associations', 'Keys Import Ongoing', {
      easeTime: 300,
      timeOut: 10000,
      closeButton: true,
      tapToDismiss: false,
      positionClass: 'toast-bottom-left'
    }).toastId = this.toastrId;
  }

  showErrorUploadToastr(error: any) {
    this.toastrService.remove(this.toastrId); // clean up first before showing another
    if (error.error.actionResponse != null) {
      this.actionResponse = new ActionResponse;
      this.actionResponse.actionResponse = error.error.actionResponse;

      const dateTimeNow = Date.now().toString();
      this.actionResponseService.put(dateTimeNow, this.actionResponse);
      this.showCompleteWithErrorsUploadToastr(dateTimeNow);
    } else {
      this.toastrService.error(error.error.message, 'Keys Import Failed', {
        easeTime: 300,
        timeOut: 10000,
        closeButton: true,
        tapToDismiss: false,
        positionClass: 'toast-bottom-left'
      });
    }
  }

  showCompleteUploadToastr(dateTimeNow: string) {
    const html = '<p>Refresh to update list</p>' +
      '<a href = "/#/action-response/' + dateTimeNow + '"> View Details</a>';
    this.toastrService.success(html, 'Keys Import Complete', {
      enableHtml: true,
      easeTime: 300,
      timeOut: 10000,
      closeButton: true,
      tapToDismiss: false,
      positionClass: 'toast-bottom-left'
    });
  }

  showCompleteWithErrorsUploadToastr(dateTimeNow: string) {
    const html = '<a href="/#/action-response/' + dateTimeNow + '">View Details</a>';
    this.toastrService.warning(html, 'Keys Import Completed with Errors', {
      enableHtml: true,
      easeTime: 300,
      timeOut: 10000,
      closeButton: true,
      tapToDismiss: false,
      positionClass: 'toast-bottom-left'
    });
  }

  getDeviceTypes() {
    return this.deviceService.getMeterTypeDictionary();
  }

}
