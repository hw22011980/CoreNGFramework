import { HttpInterceptor, HttpRequest, HttpHandler } from '@angular/common/http';
import { Injectable, Injector } from '@angular/core';
import { finalize, delay } from 'rxjs/operators';
import { LoaderStageService } from 'src/app/services/loader-stage-service.components';

@Injectable()
export class LoadingStagesInterceptor implements HttpInterceptor {
    constructor(private injector: Injector) { }
    private interceptfilter: string[] = ['paramid', 'compare', 'download', 'upload'];
    intercept(req: HttpRequest<any>, next: HttpHandler) {
        if (this.includesURL(req)) {
            const loader = this.injector.get(LoaderStageService);
            loader.show();
            return next.handle(req).pipe(delay(100), finalize(() => loader.hide()));
        }
        return next.handle(req);
    }

    includesURL(req: HttpRequest<any>) {
        let found = false;

        if (req.url.includes('write') && req.body.isConnected) return true; // special case
        if (req.url.includes('read') && req.body.isConnected) return true; // special case
        this.interceptfilter.forEach(element => {
            if (req.url.includes(element)) {
                found = true;
                return;
            }
        });

        return found;

    }
}