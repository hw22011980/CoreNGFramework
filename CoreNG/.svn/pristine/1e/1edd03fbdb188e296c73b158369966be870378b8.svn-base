import { Component, OnInit } from '@angular/core';
import { AuthService } from '../auth.service';
import { License } from '../license.model';
import { FormGroup, Validators, FormControl } from '@angular/forms';
import { ToastrService } from 'ngx-toastr';

@Component({
  selector: 'app-license',
  templateUrl: './license.component.html',
  styleUrls: ['./license.component.css']
})
export class LicenseComponent implements OnInit {

  isError: boolean;
  isNoFoundLicense: boolean;
  isNoFoundUnlock: boolean;
  isLicensed: boolean;
  isExipred: boolean;
  isNotUnlock: boolean;
  strKey: string;
  license: License;
  licenseForm: FormGroup;

  licenseError: string;
  unlockError: string;

  constructor(private authService: AuthService, private toastrService: ToastrService) { }

  ngOnInit() {
    if (!this.license) {
      this.readLicense();
    }
  }

  logout() {
    this.authService.logout();
  }

  readLicense() {
    this.authService.readLicense().subscribe(
      data => {
        if (data) {
          this.reloadData(data);
          this.showMessage();
          this.createValidations();
          localStorage.setItem('showHeader', JSON.stringify(this.license.index === 2));
        }
      },
      (error) => {
        console.log(error);
        this.showErrorToast(error.message);
      }
    );
  }

  showMessage() {
    this.isError = (this.license.index === -1);
    this.isNoFoundLicense = (this.license.index === 0) || (this.license.index === 5);
    this.isNoFoundUnlock = (this.license.index === 1);
    this.isLicensed = (this.license.index === 2);
    this.isExipred = (this.license.index === 3);
    this.isNotUnlock = (this.license.index === 4);
    this.strKey =  this.isNoFoundUnlock ? 'unlock key' : 'license key';
    if (this.isExipred) {
      this.license.licenseKey = '';
      this.license.unlockCode = '';
      this.license.unlockKey = '';
    }
    // if (this.license.index === 1) {
    //     this.isNoFoundLicense = false;
    //     this.isNoFoundUnlock = true;
    //     this.isLicensed = false;
    //     this.strKey = 'unlock key';
    //   } else if (this.license.index === 2) {
    //     this.isNoFoundLicense = false;
    //     this.isNoFoundUnlock = false;
    //     this.isLicensed = true;
    //     this.strKey = 'unlock key';
    //   } else {
    //     this.isNoFoundLicense = true;
    //     this.isNoFoundUnlock = false;
    //     this.isLicensed = false;
    //     this.strKey = 'license key';
    //   }
  }

  reloadData(data: any) {
    this.license = new License();
    this.license.index = data.index;
    this.license.licenseKey = data.value;
    this.license.unlockCode = data.value2;
    this.license.oldLicenseKeys = data.value3;
  }

  saveLicense() {
    this.authService.writeLicense(0, this.licenseKey.value).subscribe(
      data => {
        if (data['success'] === true) {
          this.showSuccessToast(data['message']);
          this.readLicense();
        } else if (data['success'] === false) {
          this.showErrorToast(data['message']);
        }
      },
      (error) => {
        console.log(error);
        this.showErrorToast(error.message);
      }
    );
  }

  saveUnlockKey() {
    this.authService.writeLicense(1, this.unlockKey.value).subscribe(
      data => {
        if (data['success'] === true) {
          this.showSuccessToast(data['message']);
          this.authService.logout();
        } else if (data['success'] === false) {
          this.showErrorToast(data['message']);
          this.readLicense();
        }
      },
      (error) => {
        console.log(error);
        this.showErrorToast(error.message);
        this.readLicense();
      }
    );
  }

  createValidations() {
    this.licenseForm = new FormGroup({
      licenseKey: new FormControl(this.license.licenseKey, [
        Validators.required,
      ]),
      unlockKey: new FormControl(this.license.unlockKey, [
        Validators.required,
      ])
    });
  }

  validLicenseKey() {
    if (this.licenseKey.invalid && (this.licenseKey.touched || this.licenseKey.dirty)) {
      this.licenseError = this.getErrorLicense();
      return false;
    } else {
      this.licenseError = '';
      return true;
    }
  }

  validUnlockKey() {
    if (this.unlockKey.invalid && (this.unlockKey.touched || this.unlockKey.dirty)) {
      this.unlockError = this.getErrorUnlock();
      return false;
    } else {
      this.unlockError = '';
      return true;
    }
  }

  getErrorLicense() {
    if (this.licenseKey.errors && this.licenseKey.errors.required)
      return 'License key is required.';
    else if (this.licenseKey.errors && (this.licenseKey.errors.minlength || this.licenseKey.errors.maxlength))
      return 'License key must be 16 characters long.';
  }

  getErrorUnlock() {
    if (this.unlockKey.errors && this.unlockKey.errors.required)
      return 'Unlock key is required.';
    else if (this.unlockKey.errors && (this.unlockKey.errors.maxlength || this.unlockKey.errors.minlength))
      return 'Unlock key must be 16 characters long.';
  }

  get licenseKey() { return this.licenseForm.get('licenseKey'); }

  get unlockKey() { return this.licenseForm.get('unlockKey'); }

  showSuccessToast(message: string, title?: string) {
    this.toastrService.clear();// clean up all toasts
    if (!title) title = 'Success Information';
    const successToast = this.toastrService.success(message, title, {
      easeTime: 300,
      timeOut: 10000,
      closeButton: true,
      tapToDismiss: false,
      positionClass: 'toast-bottom-left'
    });

    return successToast;
  }

  showErrorToast(message: string, title?: string) {
    this.toastrService.clear();
    if (!title) title = 'Error';
    const errorToast = this.toastrService.error(message, title, {
      easeTime: 300,
      timeOut: 10000,
      closeButton: true,
      tapToDismiss: false,
      positionClass: 'toast-bottom-left'
    });

    return errorToast;
  }
}
