import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { CoreModule } from './core/core.module';
import { AuthModule } from './auth/auth.module';
import { DashboardComponent } from './core/dashboard/dashboard.component';
import { AuthGuard } from './auth/auth-guard.service';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { ToastrModule } from 'ngx-toastr';
import { SearchModule } from './search/search.module';
import { SpinnerModule } from './spinner/spinner.module';
import { StandardResponseComponent } from './standard-response/standard-response.component';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';

import { ConfirmToastComponent } from './core/custom-toast/confirm-toast/confirm-toast.component';
import { InterComponentDataService } from './services/intercomponent-data-service';
import {filter} from 'rxjs/operators';
import {NavigationEnd, Router, ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
@NgModule({
  declarations: [
    AppComponent,
    DashboardComponent,
    StandardResponseComponent,
    ConfirmToastComponent
  ],
  imports: [
    BrowserModule,
    HttpClientModule,
    AppRoutingModule,
    CoreModule,
    AuthModule,
    SearchModule,
    BrowserAnimationsModule,
    SpinnerModule,
    FormsModule,
    ReactiveFormsModule,
    ToastrModule.forRoot()
  ],
  providers: [
    AuthGuard
  ],
  entryComponents: [ 
    ConfirmToastComponent
  ],
  bootstrap: [AppComponent]
})
export class AppModule
{
  public constructor(interComponentFlags: InterComponentDataService<any>, 
                    private router: Router, private location: Location,
                    private activatedRoute: ActivatedRoute, ) 
  {
    //make button visible retain state even when browser is refreshed
    var url  ='';
    var urlSplit = [];
    interComponentFlags.AddItem("setupButtonVisible",true);
    router.events.pipe(
      filter(event => event instanceof NavigationEnd))
      .subscribe(event => {
          url = (event as NavigationEnd).url;
          urlSplit = url.split('/');
          if(urlSplit.length>=4){
            if((urlSplit[1]=="devices") && (urlSplit[3]=="setup"))
              interComponentFlags.AddItem("setupButtonVisible",false);              
            
          } 
      });  

  }

}
