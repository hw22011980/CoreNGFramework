import { Component, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';
import { map } from 'rxjs/operators';
import { TreeTableComponent } from 'src/app/core/component/tree-table/tree-table.component';
import { SetupService } from 'src/app/devices/setup.service';
import { LoaderStageService } from 'src/app/services/loader-stage-service.components';

@Component({
  selector: 'app-compare-setup',
  templateUrl: './compare-setup.component.html',
  styleUrls: ['./compare-setup.component.css']
})
export class CompareSetupComponent implements OnInit, OnDestroy {

  @ViewChild('treeTable') treeTable: TreeTableComponent;
  @Input() ids: any;
  raw_data: any;
  data: any = [];
  temp_data: any = [];
  count: number = 0;
  existDifferences = false;
  disabledBtn = false;
  error_msg: any;
  output_data = [];

  constructor(public setupService: SetupService, public loader: LoaderStageService) { }

  public ngOnInit() {
    this.initializeData();
    this.loadData();
  }

  public ngOnDestroy() {
    this.initializeData();
  }

  configs: any = {
    id_field: 'id',
    parent_id_field: 'parent',
    parent_display_field: 'name',
    action_column_width: '12%',
    radio_column_width: '10%',
    compare_select: true,
    view_compare_column_text: 'Meter VS Offline',
    compare_select_one_text: 'Meter',
    compare_select_two_text: 'Offline',
    compare_select_one_imgUrl: './assets/images/icons/electric-meter.svg',
    compare_select_two_imgUrl: './assets/images/icons/database_add.svg',
    actions: {
      view_compare: true
    },
    css: { // Optional
      expand_class: 'fa fa-chevron-right',
      collapse_class: 'fa fa-chevron-down',
      view_compare_class: 'fa fa-exchange'
    },
    columns: [
      {
        name: 'name',
        header: 'Stage Name',
        width: '30%'
      },
      {
        name: 'meter',
        header: 'Data in Meter',
        width: '19%'
      },
      {
        name: 'offline',
        header: 'Data in Offline',
        width: '19%'
      },
      {
        name: 'deviceStageId',
        header: 'deviceStageId',
        hidden: true,
      },
      {
        name: 'deviceStageParamId',
        header: 'deviceStageParamId',
        hidden: true,
      },
      {
        name: 'deviceStageObisId',
        header: 'deviceStageObisId',
        hidden: true,
      },
      {
        name: 'obisDetailId',
        header: 'obisDetailId',
        hidden: true,
      },
      {
        name: 'actualMeterValue',
        header: 'actualMeterValue',
        hidden: true,
      },
      {
        name: 'actualOfflineValue',
        header: 'actualOfflineValue',
        hidden: true,
      },
      {
        name: 'logicalMeterValue',
        header: 'actualMeterValue',
        hidden: true,
      },
      {
        name: 'logicalOfflineValue',
        header: 'actualOfflineValue',
        hidden: true,
      },
      {
        name: 'hidden',
        header: 'hidden',
        hidden: true,
      },
      {
        name: 'selection_disabled',
        header: 'selection_disabled',
        hidden: true,
      }
    ]
  };

  collapseAll() {
    this.treeTable.collapseAll();
  }

  expandAll() {
    this.treeTable.expandAll();
  }

  loadData() { 
    if(this.ids.length < 1){
      this.error_msg = "Please select the stages you want to compare!";
      return;
    }
    this.disabledBtn = true;
    this.setupService.GetCompareSetup(this.ids).subscribe(
      compare_data => {
        this.raw_data = JSON.parse(JSON.stringify(compare_data));
        if(this.raw_data.success){
          this.processData(this.raw_data.data);
          this.existDifferences = this.data.length > 0;
        }  
        this.disabledBtn = false;
      },
      (error: any) => {
        console.log(error);
        this.error_msg = error.message;
        this.disabledBtn = false;
      });
  }

  processData(tree_data: any) {
    this.temp_data = [];
    for (let i = 0; i < tree_data.length; i++) {
      let parentNode = tree_data[i];
      this.count += 1;
      let value = { 
        meter: undefined, offline: undefined, 
        actualMeterValue: undefined, actualOfflineValue: undefined, 
        logicalMeterValue: undefined, logicalOfflineValue: undefined, 
        parentId: 0 
      };
      this.setData(parentNode, undefined, value);
      if (parentNode.children) {
        this.processChildData(parentNode.children, parentNode, this.count);
      }
    }
    this.data = [...this.temp_data];
  }

  processChildData(child_data: any, parentNode: any, parentId: number) {
    for (let i = 0; i < child_data.length; i++) {
      let node = child_data[i];
      this.count += 1;
      let nodeData = node.data;
      if (nodeData && nodeData.onlineData && Array.isArray(nodeData.onlineData.value)) { // Complex Stage
        parentNode.deviceStageObisId = node.deviceStageObisId ? node.deviceStageObisId : undefined;
        this.processComplexStageData(nodeData, parentNode, this.count - 1);
      } else { //Basic Stage or May be Sub Children
        let value = {
          meter: nodeData && nodeData.onlineData ? nodeData.onlineData.value : undefined,
          offline: nodeData && nodeData.offlineData ? nodeData.offlineData.value : undefined,
          actualMeterValue: nodeData && nodeData.onlineData ? nodeData.onlineData : undefined,
          actualOfflineValue: nodeData && nodeData.offlineData ? nodeData.offlineData : undefined,
          logicalMeterValue: nodeData && nodeData.onlineData ? nodeData.onlineData : undefined,
          logicalOfflineValue: nodeData && nodeData.offlineData ? nodeData.offlineData : undefined,
          parentId: parentId
        };
        this.setData(node, parentNode, value);
        if (node.children) {
          this.processChildData(node.children, node, this.count);
        }
      }
    }
  }

  processComplexStageData(nodeData: any, parentNode: any, parentId: number) {
    let length = nodeData.onlineData.dataType === "Array" ? 1 : nodeData.onlineData.value.length;
    for (let i = 0; i < length; i++) {     
      this.count += 1;
      let onlineVal = undefined;
      let offlineVal = undefined;
      let displayMeterVal = undefined;
      let displayOfflineVal = undefined;

      if(nodeData.onlineData && nodeData.onlineData.dataType === "Array"){
        onlineVal = nodeData.onlineData;
        displayMeterVal = onlineVal.value[0].value + " |...";
      } else if(nodeData.onlineData && nodeData.onlineData.dataType === "Structure") {
        onlineVal = nodeData.onlineData.value[i];
        displayMeterVal = Array.isArray(onlineVal.value) ? onlineVal.value[0].value[0].value + " |..." : onlineVal.value;
      }

      if(nodeData.offlineData && nodeData.offlineData.dataType === "Array"){
        offlineVal = nodeData.offlineData;
        displayOfflineVal = offlineVal.value[0].value + " |...";
      } else if(nodeData.offlineData && nodeData.offlineData.dataType === "Structure") {
        offlineVal = nodeData.offlineData.value[i];
        displayOfflineVal = Array.isArray(offlineVal.value) ? offlineVal.value[0].value[0].value + " |..." : offlineVal.value;
      }

      let value = {
        meter: displayMeterVal,
        offline: displayOfflineVal,
        actualMeterValue: nodeData.onlineData ? nodeData.onlineData : undefined,
        actualOfflineValue: nodeData.offlineData ? nodeData.offlineData : undefined,
        logicalMeterValue: onlineVal ? onlineVal : undefined,
        logicalOfflineValue: offlineVal ? offlineVal : undefined,
        obisDetailId: onlineVal.id ? onlineVal.id : undefined,
        hidden: onlineVal.isEqual ? onlineVal.isEqual : undefined,
        selection_disabled: true,
        parentId: parentId
      };
      this.setData(onlineVal, parentNode, value);
    }
  }

  setData(node: any, parentNode: any, value: any) {
    if(parentNode){
      node.deviceStageId = parentNode.deviceStageId ?  parentNode.deviceStageId : undefined;
      if(parentNode.deviceStageParamId) node.deviceStageParamId = parentNode.deviceStageParamId;
      if(parentNode.deviceStageObisId) node.deviceStageObisId = parentNode.deviceStageObisId;
    }
    this.temp_data.push(
      {
        id: this.count,
        name: node.name,
        deviceStageId: node.deviceStageId,
        deviceStageParamId: node.deviceStageParamId,
        deviceStageObisId: node.deviceStageObisId ? node.deviceStageObisId : undefined,
        obisDetailId: value.obisDetailId ? value.obisDetailId : undefined,
        actualMeterValue: value.actualMeterValue ? value.actualMeterValue : undefined,
        actualOfflineValue: value.actualOfflineValue ? value.actualOfflineValue : undefined,
        logicalMeterValue: value.logicalMeterValue ? value.logicalMeterValue : undefined,
        logicalOfflineValue: value.logicalOfflineValue ? value.logicalOfflineValue : undefined,
        hidden: value.hidden ? value.hidden : false,
        selection_disabled: value.selection_disabled ? value.selection_disabled : false,
        meter: value.meter,
        offline: value.offline,
        parent: value.parentId
      }
    );
  }

  onSelectedValue(data: any){
    console.log(data);
    this.output_data = [];
    let onlineValues = this.removedDuplicates(data.rdo1Values);
    let offlineValues = this.removedDuplicates(data.rdo2Values);
    // radio button "Meter"
    onlineValues.forEach(ele => {
      let value = {
        deviceStageObisId: ele.deviceStageObisId,
        value: ele.actualMeterValue,
        isConnected: 0
      }
      this.output_data.push(value);
    });
    // radio button "Offline"
    offlineValues.forEach(ele => {
      let value = {
        deviceStageObisId: ele.deviceStageObisId,
        value: ele.actualOfflineValue,
        isConnected: 1
      }
      this.output_data.push(value);
    });
    console.log(this.output_data);
  }

  initializeData() {
    this.data = [];
    this.temp_data = [];
    this.count = 0;
    this.existDifferences = false;
    this.disabledBtn = false;
    this.output_data = [];
  }

  private removedDuplicates(data){
    let filterArray = data.reduce((accumalator, current) => {
      if(!accumalator.some(item => item.deviceStageObisId === current.deviceStageObisId)) {
        accumalator.push(current);
      }
      return accumalator;
    },[]);
    return filterArray;
  }
}
