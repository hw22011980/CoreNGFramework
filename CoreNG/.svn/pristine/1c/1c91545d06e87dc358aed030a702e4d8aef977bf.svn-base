import { Injectable } from '@angular/core';
import { environment } from 'src/environments/environment';
import { Observable } from 'rxjs';
import { HttpClient, HttpHeaders } from '@angular/common/http';

@Injectable({
  providedIn: 'root'
})
export class CoreService {
  private configUrl = 'assets/config.json';
  mddcsRestServiceAddress = environment.mddcsRestServiceAddress;
  mddcsRestServicePort = environment.mddcsRestServicePort;
  // TODO: add local storage reader to read out the server address base
  // serverAddress = 'http://' + this.mddcsRestServiceAddress + ':' + this.mddcsRestServicePort + '/mddcs/api/';
  serverAddress = '';
  constructor(private httpClient: HttpClient) { }

  public async getJSON() {
    let headers = new HttpHeaders();
    headers = headers.append('Refresh', 'true');
    return await this.httpClient.get(this.configUrl, { headers }).toPromise();
  }

  public async setRestAPI() {
    await this.getJSON().then(data => {
      this.serverAddress = data['mddcsRestApi'];
      // set the api url in local storage so will not get lost when refreshing
      localStorage.setItem('mddcsRestApi', this.serverAddress);
      localStorage.setItem('checkingConnectionInterval', data['checkingConnectionInterval']);
    });
  }

  public getServerAddress() {
    let url = localStorage.getItem('mddcsRestApi');
    if (!url) {
      this.setRestAPI();
      url = localStorage.getItem('mddcsRestApi');
    }
    return url;
  }

}
