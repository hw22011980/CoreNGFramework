import { Component, EventEmitter, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { Subscription } from 'rxjs';
import { Envelop, EventMessage, ICrossComponentMsg, NavTreeNodeStatus } from 'src/app/common/cross-component-msg';
import { PublishDetailsService } from 'src/app/services/publish-details.service';
import { DeviceService } from '../../device.service';
import { DeviceConnectStatus } from '../../shared/device-connect-status';
import { ToolsData } from './tools-type.model';
import { saveAs } from 'file-saver';
import { SetupService } from '../../setup.service';
import { formatDate } from '@angular/common';
import { ToastrService } from 'ngx-toastr';

@Component({
  selector: 'app-tools',
  templateUrl: './tools.component.html',
  styleUrls: ['./tools.component.css']
})
export class ToolsComponent implements OnInit, OnDestroy, ICrossComponentMsg {
  @Output() toolClicked = new EventEmitter<{ status: number, loading: boolean, ids: any }>();
  xComponentSubscription: Subscription;
  connected = false;
  disableClick = true;

  envelop: Envelop;
  checkedStageIDArray: any = [];
  data: any;
  responsedata: any;
  deviceId: number;
  plantNumber: string;
  fileToUpload: File = null;
  filename: string;
  isFileChosen: boolean;
  exportSuccess: boolean = false;
  toastrId: number;
  onGoingImport: boolean;
  jsonIDArr: any;
  importToggle: boolean;

  constructor(private emitDetails: PublishDetailsService,
    private deviceService: DeviceService,
    private activatedRoute: ActivatedRoute,
    private toastrService: ToastrService,
    private setupService: SetupService) {
    this.setEnvelop(null);
  }

  ngOnInit() {
    this.setEnvelop(null);
    this.jsonIDArr = [];
    this.disableClick = true;
    this.importToggle = true;
    this.deviceId = this.activatedRoute.snapshot.params['id'];
    this.filename = "Choose XML File ...";
    this.isFileChosen = false;
    this.exportSuccess = false;
    this.xComponentSubscription = this.emitDetails.messageEmitter.subscribe(data => this.onSubscribedData(data));
    if (localStorage.hasOwnProperty('previousId')) {
      const connectstatus: DeviceConnectStatus = JSON.parse(localStorage.getItem('previousId'));
      this.connected = connectstatus.isConnected;
      this.plantNumber = connectstatus.plantNumber;
      this.deviceId = connectstatus.deviceId;
    } else {
      this.connected = false;
    }
  }

  ngOnDestroy() {
    this.xComponentSubscription.unsubscribe();
  }
  setEnvelop(data) {
    this.envelop = new Envelop('', 'ToolsComponent', '', data);
  }

  handleFileInput(data: any) {
    this.fileToUpload = data;
  }


  onImport() {
    if (this.fileToUpload != null) {
      this.importToggle = true;
      this.onToolsButtonClicked(null, 4);
      console.log('import here'); // + this.fileToUpload.name);
    }
    else {
      this.showNoSelectedStageParamsError(`Import ${this.connected ? 'online' : 'offline'} error`, 'No setup xml file selected.');
    }
    this.fileToUpload = null;

  }
  onCustomImportClose() {
    this.importToggle = true;
    this.fileToUpload = null;

  }

  onImportToggle() {
    this.importToggle = !this.importToggle;
  }

  onToolsButtonClicked(event, selectionValue) {
    this.jsonIDArr = [];
    this.checkedStageIDArray.forEach(element => {
      var jsonIDs = { 'id': element };
      this.jsonIDArr.push(jsonIDs);
    });
    var payload: any;
    this.disableClick = false;
    this.envelop.set(new EventMessage('disableClick', this.disableClick));
    this.emitDetails.messageEmitter.next(this.envelop);
    console.log(selectionValue);
    switch (selectionValue) {
      case 1:
        // read from meter
        if (this.jsonIDArr.length != 0) {
          this.setupService.getValues(this.jsonIDArr, 1).subscribe(async readData => {
            console.log(this.jsonIDArr);
            console.log(readData);
            this.updateSetupTree('Read', readData.message);
          },
            (errorResponse) => {
              console.log(errorResponse);
              this.disableClick = true;
              this.envelop.set(new EventMessage('disableClick', this.disableClick));
              this.emitDetails.messageEmitter.next(this.envelop);
              this.showErrorToastr(errorResponse.error, "Error on Read");
            }
          );
        }
        else {
          this.showNoSelectedStageParamsError('Read online error', 'No stage selected to read.');
        }

        break;
      case 2:
        if (this.jsonIDArr.length != 0) {
          let processData = this.processMultipleReadData(this.jsonIDArr);
          console.log(processData);
          this.setupService.setValues(processData, 1).subscribe(writeData => {
            this.updateSetupTree('Write', writeData.message);
          },
            (errorResponse) => {
              console.log(errorResponse);
              this.disableClick = true;
              this.envelop.set(new EventMessage('disableClick', true));
              this.emitDetails.messageEmitter.next(this.envelop);
              this.showErrorToastr(errorResponse.error, "Error on Write");
          });
        }
        else {
          this.showNoSelectedStageParamsError('Write online error', 'No stage selected to write.');
        }
        break;
      case 3:
        this.toolClicked.emit({ status: selectionValue, loading: false, ids: this.jsonIDArr });
        break;
      case 4:
        if (this.fileToUpload != null) {
          payload = new ToolsData(this.plantNumber, this.fileToUpload.name, (this.connected ? 1 : 0), this.fileToUpload);
          this.deviceService.setImport(payload, this.deviceId, 'upload').subscribe((StandardResponse) => {
            this.updateSetupTree('Import', '');
          },
            (errorResponse) => {
              console.log(errorResponse);
              this.disableClick = true;
              this.envelop.set(new EventMessage('disableClick', this.disableClick));
              this.emitDetails.messageEmitter.next(this.envelop);
              this.showErrorToastr(errorResponse.error, "Error on Import");

            });
        }

        break;
      case 5:
        // Export to XML
        if (this.jsonIDArr.length != 0) {
          var currentDate = new Date();
          const cValue = formatDate(currentDate, 'yyyyMMddHHmmss', 'en-US');
          const fValue = `${this.plantNumber}_${cValue}.xml`;
          payload = new ToolsData(this.plantNumber, null, (this.connected ? 1 : 0), null, this.jsonIDArr);
          this.deviceService.setExport(payload, this.deviceId, 'download').subscribe(async (data) => {
            console.log(data);
            // Checking blob or contains message not
            if (data instanceof Blob) {
              //blob
              const text = await (new Response(data)).text();
              let json = this.isJsonString(text);
              if(json !== null)
              {
                if(!json.success)
                {
                  this.disableClick = true;
                  this.envelop.set(new EventMessage('disableClick', this.disableClick));
                  this.emitDetails.messageEmitter.next(this.envelop);
                  this.showErrorToastr(json, 'Error on Export');
                }
              }
              else
              {
                saveAs(data, `${this.plantNumber}_${cValue}.xml`);
                this.updateSetupTree('Export', '');
              }
            
            } else {
              const text = await data.text();
              const response = JSON.parse(text);
              console.log(response);
              if (!response.success) {
                this.disableClick = true;
                this.envelop.set(new EventMessage('disableClick', this.disableClick));
                this.emitDetails.messageEmitter.next(this.envelop);
                this.showStringToastr(response.message, 'Error on Export');
              }
            };
          },
            (error) => {
              console.log(error);
              this.disableClick = true;
              this.envelop.set(new EventMessage('disableClick', this.disableClick));
              this.emitDetails.messageEmitter.next(this.envelop);
              this.showErrorToastr(error, 'Error on Export');

            });
        }
        else {
          this.showNoSelectedStageParamsError('Export Error', 'No stage selected to export.');
        }

        break;
      default:
        break;
    }

  }
  private  isJsonString(str) :any {
      var  jsonObj = null;
      try {
        jsonObj =JSON.parse(str);
      } catch (e) {
          return jsonObj;
      }
      return jsonObj;
  }

  private showNoSelectedStageParamsError(title: string, errorMessage: string) {
    const error = { message: errorMessage };
    this.showErrorToastr(error, title);
    this.disableClick = true;
    this.envelop.set(new EventMessage('disableClick', this.disableClick));
    this.emitDetails.messageEmitter.next(this.envelop);
  }
  private updateSetupTree(operation: string, message: string) {
    if (this.deviceId != null) {
      // device-navigation is async with device-info, so need to implement in both files;
      this.setupService.GetMenus(this.deviceId).then(
        data => {
          const temp = { id: this.deviceId, menu: data };
          localStorage.setItem('menu', JSON.stringify(temp));
          const strmenu = localStorage.getItem('menu');
          const objmenu = JSON.parse(strmenu);
          this.envelop.set(new EventMessage('updateNavTree', objmenu.menu));
          this.emitDetails.messageEmitter.next(this.envelop);
          this.checkedStageIDArray = [];
          console.log(objmenu.menu);
          objmenu.menu.forEach(parent => {
            parent.children.forEach(child => {
              if (child.selected == 1) this.checkedStageIDArray.push(child.id);
            });
          });
          if (message !== '') {
            this.showCompleteToastr(message, 'Completed');
          } else {
            this.showCompleteToastr(`${operation} ${this.connected ? 'online' : 'offline'}`, 'Completed');
          }
          this.disableClick = true;
          this.envelop.set(new EventMessage('disableClick', this.disableClick));
          this.emitDetails.messageEmitter.next(this.envelop);
          this.envelop.set(new EventMessage('isCollapse', false));
          this.emitDetails.messageEmitter.next(this.envelop);
        }
      );
    }
  }
  onSubscribedData(data: any) {
    if (data instanceof Envelop) {
      const tempdata = data as Envelop;
      switch (tempdata.from) {
        case 'DeviceNavigationComponent':
          {
            if (tempdata.get() instanceof DeviceConnectStatus) {
              const status = tempdata.get() as DeviceConnectStatus;
              this.connected = status.isConnected;
            }
            if (tempdata.get() instanceof EventMessage) {
              const status = tempdata.get() as EventMessage;
              if (status.EventName === 'disableClick') {
                this.disableClick = status.Value;
              }
            }
            this.getSelectedIDs(tempdata);
          }
          break;
        case 'StageTableComponent':
        case 'StageBasicComponent':
        case 'DisplayProfileComponent':
          {
            if (tempdata.get() instanceof EventMessage) {
              const status = tempdata.get() as EventMessage;
              if (status.EventName === 'disableClick') {
                this.disableClick = status.Value;
              }
            }

          }
          break;
        case 'NavTreeComponent':
        case 'DeviceSetupComponent':
          {
            this.getSelectedIDs(tempdata);
            if (tempdata.get() instanceof EventMessage) {
              const status = tempdata.get() as EventMessage;

              switch (status.EventName) {
                case 'toolsSlideInOffline':
                  if (status.Value && !this.importToggle) this.importToggle = true;
                  break;
                case 'disableClick':
                  this.disableClick = status.Value;
                  break;
                default:
                  break;
              }
            }
          }
          break;
        default:
          break;
      }
    }
  }

  private getSelectedIDs(data: Envelop) {
    if (data.get() instanceof NavTreeNodeStatus) {
      this.checkedStageIDArray = [];
      (data.get() as NavTreeNodeStatus).CheckedStageIDArray.forEach(element => {
        this.checkedStageIDArray.push(String(element));
      });
      console.log(this.checkedStageIDArray);
    }
  }

  showErrorToastr(error: any, title: string) {
    this.showStringToastr(error.message, title);
  }
  showStringToastr(errormessage: string, title: string) {
    this.toastrService.remove(this.toastrId); // clean up first before showing another
    this.toastrService.error(errormessage, title, {
      easeTime: 300,
      timeOut: 10000,
      closeButton: true,
      tapToDismiss: false,
      positionClass: 'toast-bottom-left'
    });
  }

  showCompleteToastr(title: string, message: string) {
    this.toastrService.success(message, title, {
      enableHtml: true,
      easeTime: 300,
      timeOut: 10000,
      closeButton: true,
      tapToDismiss: false,
      positionClass: 'toast-bottom-left'
    });
  }

  private processMultipleReadData(readData: any) {
    console.log(readData);

    let writeData = [];
    if (readData.data === undefined) {
      for (let i = 0; i < readData.length; i++) {
        let currentReadData = readData[i];
        writeData.push({
          "id": currentReadData.id,
          "isConnected": 1
        });
      }
    } else {
      for (let i = 0; i < readData.data.length; i++) {
        let currentReadData = readData.data[i];
        writeData.push({
          "id": currentReadData.id,
          "isConnected": 1,
          // if "objectsRead" is null, data will read from DB
          // "objectsRead": {
          //   "value": currentReadData.objectsRead ? currentReadData.objectsRead.value : null
          // }
        });
      }
    }
    return writeData;
  }

}
