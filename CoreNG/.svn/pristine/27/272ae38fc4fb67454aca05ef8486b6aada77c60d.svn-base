import { Injectable } from '@angular/core';
import { CoreService } from '../core/core.service';
import { AuthService } from '../auth/auth.service';
import { HttpClient, HttpErrorResponse, HttpHeaders, HttpRequest, HttpParams } from '@angular/common/http';
import { tap } from 'rxjs/operators';
import { Firmwares } from './shared/firmwares.model';
import { ActionResponse } from '../action-response/shared/action-response.model';
import { SpinnerService } from '../spinner/spinner.service';

@Injectable({
  providedIn: 'root'
})
export class FirmwareService {
  private formData: FormData;
  public firmwares: Firmwares;
  firmwareStatusDictionary: any = {};

  constructor(private coreService: CoreService,
    private authService: AuthService,
    private httpClient: HttpClient,
    private spinnerService: SpinnerService) { }

  getFirmwares(refresh = false, params = new HttpParams()) {
    let headers = new HttpHeaders();
    if (refresh) {
      headers = headers.append('Refresh', 'true');
    }

    headers = headers.append('Identifier', 'GetFirmwares');

    const options = { params: params, headers: headers };

    return this.httpClient.get<Firmwares>(this.getFirmwareRequestUrl(), options)
      .pipe(
        tap(data => {
          this.firmwares = data;
          console.log(data);
        })
      );
  }

  public uploadFirmware(formData: FormData) {
    const uploadFirmwareRequestUrl = this.coreService.getServerAddress() + 'devices/firmware';
    return this.httpClient.post<ActionResponse>(uploadFirmwareRequestUrl, formData)
      .pipe(
        tap(data => {
          console.log(data);
        })
      );
  }

  public updateFirmware(formData: FormData) {
    const uploadFirmwareRequestUrl = this.coreService.getServerAddress() + 'firmwares/update';
    return this.httpClient.put<ActionResponse>(uploadFirmwareRequestUrl, formData)
      .pipe(
        tap(data => {
          console.log(data);
        })
      );
  }

  public getFirmwareRequestUrl() {
    return this.coreService.getServerAddress() + 'firmwares';
  }

  getFirmwareStatusDictionary() {
    this.firmwareStatusDictionary['Inactive'] = '0';
    this.firmwareStatusDictionary['Active'] = '1';

    return this.firmwareStatusDictionary;
  }
}
